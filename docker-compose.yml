services:
  postgres:
    image: postgres:16
    container_name: eshop-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - eshop-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  flyway-migration:
    image: flyway/flyway:latest
    container_name: eshop-flyway
    environment:
      - FLYWAY_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - FLYWAY_USER=${POSTGRES_USER}
      - FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
      # Tell the Flyway image to load configuration from the mounted properties file
      - FLYWAY_CONFIG_FILES=/flyway/conf/flyway.conf
    volumes:
      - ./DB/src/main/resources/db/migration:/flyway/sql:ro
      # Mount the application's flyway properties into the Flyway container
      - ./DB/src/main/resources/application-docker.properties:/flyway/conf/flyway.conf:ro
    depends_on:
      postgres:
        condition: service_healthy
    command: migrate
    networks:
      - eshop-network

  backend:
    build:
      context: ./backend
      dockerfile: DockerFile
    container_name: eshop-backend
    depends_on:
      flyway-migration:
        condition: service_completed_successfully
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      # --- Auth0 Security ---
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=${AUTH0_ISSUER_URI}
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_AUDIENCE=${AUTH0_AUDIENCE}
    ports:
      - "8080:8080"
    networks:
      - eshop-network

networks:
  eshop-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
